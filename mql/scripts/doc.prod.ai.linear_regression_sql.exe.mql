script create exe "doc.prod.ai.linear_regression_sql" false 1 
  (param
  ;) 
  "Create documentation page" 
{

	-> "[page]" (execute "doc.lib.init.exe"
		"[description]" "Linear regression"
		"[keywords]" "Linear, regression"
		"[return_link]" "artificial_intelligence"
	);

	include "doc.lib.add_li.exe"
		"[section]" "Goal"
		"[is_last]" "0"
		"[li]" (concat "[
			[\"TEXT\", \"Simple linear regression is useful for finding relationship between two continuous variables.\"],
			[\"TEXT\", \"We are going to give to a linear regression algorithm data from a SQL database, <br> and then we are going to make predictions.\"],
			[\"TEXT\", \"Reminder, to execute an order, you can click on <img src='imgs/play0.png' style='width: 60px;'> or <img src='imgs/play.png' style='width: 60px;'> or [CTRL]+E or [Apple]+E on OSX.\"],
	]");

	

	include "doc.lib.add_li.exe"
		"[section]" "Let's start by creating a table and adding data to it."
		"[is_last]" "0"
		"[li]" (concat "[
			[\"MQL\", \"Here some data:\", \"" (string replace (string mql_to_html (mql {
json load "data" "[]";
json load "row" "[]";json iarray "row" / 1 NUM;json iarray "row" / 1 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 3 NUM;json iarray "row" / 2 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 5 NUM;json iarray "row" / 3 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 7 NUM;json iarray "row" / 4 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 9 NUM;json iarray "row" / 7 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 11 NUM;json iarray "row" / 8 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 13 NUM;json iarray "row" / 9 NUM;json iarray "data" / (json doc "row") ARRAY;
json load "row" "[]";json iarray "row" / 15 NUM;json iarray "row" / 10 NUM;json iarray "data" / (json doc "row") ARRAY;
json doc "data";
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Result:\", \"" (string replace (string mql_to_html (mql {
"[
  [
    1.0,
    1.0
  ],
  [
    3.0,
    2.0
  ],
  [
    5.0,
    3.0
  ],
  [
    7.0,
    4.0
  ],
  [
    9.0,
    7.0
  ],
  [
    11.0,
    8.0
  ],
  [
    13.0,
    9.0
  ],
  [
    15.0,
    10.0
  ]
]"
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Create the table 'test_country':\", \"" (string replace (string mql_to_html (mql {
sql connect "session1" {cm get "MENTDB";};
sql dml "session1" (concat "CREATE TABLE `test_country` (
  `id` BIGINT(11) NOT NULL AUTO_INCREMENT,
  `x` FLOAT NOT NULL,
  `y` FLOAT NOT NULL,
  PRIMARY KEY (`id`));
");
sql disconnect "session1";
})) "\"" (concat \ "\"")) "\"],
			[\"TEXT\", \"The table has been created.\"],
			[\"TEXT\", \"Adding data into this table:\"],
			[\"TEXT_IMG\", \"Go to the 'Connect' section\", \"rl03.png\", \"50\"],
			[\"TEXT\", \"Double click on 'MENTDB' sql connection...\"],
			[\"TEXT_IMG\", \"All tables are displayed.\", \"rl04.png\", \"50\"],
			[\"TEXT_IMG\", \"Click right on 'test_country' and select 'GEN WS > INSERT'.\", \"rl05.png\", \"50\"],
			[\"MQL\", \"This MQL source code are generated:\", \"" (string replace (string mql_to_html (mql {
script create post "MENTDB.test_country.insert" false 1
  (param
  	(var "[id]" {true} "description ..." is_null:false is_empty:false "example ...")
  	(var "[x]" {true} "description ..." is_null:false is_empty:false "example ...")
  	(var "[y]" {true} "description ..." is_null:false is_empty:false "example ...")
  )
  "Insert a new element into the table 'test_country'."
{
	
	try {
		
		#Connection ...;
		sql connect "session1" {cm get "MENTDB"};
		
		-> "[result]" (sql dml "session1" (concat 
			"INSERT INTO public.test_country (
				id,
				x,
				y
			) VALUES (
				" (sql encode [id]) " ,
				" (sql encode [x]) " ,
				" (sql encode [y]) "
			);"
		));
		
		#Disconnection ...;
		sql disconnect "session1";
		
		# Return the json;
		[result]
		
	} {

		#Close the connection;
		try {sql disconnect "session1"} {} "[sub_err]";

		#Generate an error;
		exception (1) ([err]);
		
	} "[err]";
	
} "Return the number of impacted lines.";
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Copy this code...:\", \"" (string replace (string mql_to_html (mql {
#Connection ...;
sql connect "session1" {cm get "MENTDB"};

-> "[result]" (sql dml "session1" (concat 
	"INSERT INTO public.test_country (
		id,
		x,
		y
	) VALUES (
		" (sql encode [id]) " ,
		" (sql encode [x]) " ,
		" (sql encode [y]) "
	);"
));

#Disconnection ...;
sql disconnect "session1";
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"And update it like this :\", \"" (string replace (string mql_to_html (mql {
#Connection ...;
sql connect "session1" {cm get "MENTDB"};

json parse_array "data" "/" "row" {

	sql dml "session1" (concat 
		"INSERT INTO public.test_country (
			x,
			y
		) VALUES (
			" (sql encode (json select "row" "/[0]")) " ,
			" (sql encode (json select "row" "/[1]")) "
		);"
	);

};

#Disconnection ...;
sql disconnect "session1";
})) "\"" (concat \ "\"")) "\"],
			[\"TEXT\", \"Execute the MQL script. Data are inserted into the table.\"],
			[\"TEXT_IMG\", \"Double click on the table 'test_country'\", \"rl04.png\", \"50\"],
			[\"TEXT_IMG\", \"All data into the table 'test_country' are displayed.\", \"rl06.png\"],
	]");

	include "doc.lib.add_li.exe"
		"[section]" "Loading data into the algorithm."
		"[is_last]" "0"
		"[li]" (concat "[
			[\"MQL\", \"Loading data into the algorithm\", \"" (string replace (string mql_to_html (mql {
pa rl load "reg1" "MENTDB" "x" "y" "select x, y from test_country";
})) "\"" (concat \ "\"")) "\"],
			[\"TEXT\", \"Data are loaded.\"],
	]");

	include "doc.lib.add_li.exe"
		"[section]" "Make predictions."
		"[is_last]" "1"
		"[li]" (concat "[
			[\"MQL\", \"To see how much data is saved:\", \"" (string replace (string mql_to_html (mql {
pa rl count "reg1";
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Result:\", \"" (string replace (string mql_to_html (mql {
8;
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"To get R:\", \"" (string replace (string mql_to_html (mql {
pa rl r "reg1";
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Result:\", \"" (string replace (string mql_to_html (mql {
0.9883173560569456;
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Make prediction with data from 1 to 15 (increment 0.1):\", \"" (string replace (string mql_to_html (mql {
json load "new_data" "[]";
for (-> "[x]" 1) (< [x] 15) (-> "[x]" (+ [x] 0.1)) {

	json load "new_row" "[]";
	json iarray "new_row" / [x] NUM;
	json iarray "new_row" / (pa rl predict "reg1" [x]) NUM;
	json iarray "new_data" / (json doc "new_row") ARRAY;

};
pa xy_scatter (json doc "new_data") "X, Y";
})) "\"" (concat \ "\"")) "\"],
			[\"TEXT_IMG\", \"Here the line:\", \"rl02.png\"],
			[\"MQL\", \"Make simple prediction:\", \"" (string replace (string mql_to_html (mql {
pa rl predict "reg1" 25;
})) "\"" (concat \ "\"")) "\"],
			[\"MQL\", \"Result:\", \"" (string replace (string mql_to_html (mql {
17.23809523809524;
})) "\"" (concat \ "\"")) "\"],
			[\"TEXT\", \"Now you can do linear regression by select from your SQL database.\"],
	]");


	include "doc.lib.write.exe"
		"[page_html]" "linear_regression_sql.html"
		"[title_link]" "Linear regression with sql database"
	;
	
} "Return nothing";
script set delay "doc.prod.ai.linear_regression_sql.exe" 0 day {1;};
